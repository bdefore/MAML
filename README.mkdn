## Description

MAML is MXML in the spirit of YAML.

## Prerequisites

* [Ruby](http://www.ruby-lang.org/)
    
## Usage
    
**WARNING** Use at your own discretion, this is experimental hobby code and should not be relied on for building rockets to space. Check in your code before you mess with this.

	From MXML, generate a creature that nurses its young from teats:
	ruby maml.rb test.mxml

	From MAML, generate a dinosaur:
	ruby maml.rb test.maml

	Compile a MAML (behind the scenes, convert to a dinosaur, then compile that)
	ruby mamlc.rb furry.maml
	
	Rebuild my dinosaur into a directory named Gondwanaland on my Desktop:
	ruby maml.rb -o ~/Desktop/Gondwanaland test.maml

	Rebuild my dinosaur every time I save my MAML:
	ruby maml.rb -w test.maml

	Watch a MAML directory, rebuild its corresponding dinosaur whenever I save:
	ruby maml.rb -w ~/Documents/Flex\ Builder\ 3/My\ Flex\ Project/src

	Watch a MAML directory, rebuild dinosaurs to a path whenever I save, and run an Ant task afterwards
	ruby maml.rb -w ~/Documents/Code/PROJECT_NAME/maml -o ~/Documents/Code/PROJECT_NAME/src -c 'ant -f ~/Documents/Code/PROJECT_NAME/build.xml'
	
Command line switches:
	
	-o, --output-path PATH
	Specify where you want generated files to go. Subdirectories named 'maml' and 'mxml' will be created
	within this directory, and from there a directory structure will match that of the source files. Default
	is 'maml_generated'.
	
	-w, --watch-mode
	Will check for when a file or files within a directory specified in the input path have changed and
	trigger conversions automatically to the output path.
	
	-t, --sleep-time SECONDS
	The interval at which watch mode will check for changed files. Default is 1.

	-c, --callback COMMAND
	Run a terminal command after any successful conversion. Useful for build scripts in tandem with watch mode.

	-d, --dry-run
	Outputs to std_out indicating what will be written where.
	
	-v, --verbose
	Chattier messages.

	--indent-size
	How many spaces to indent per nested level. Default is 2.

	--mxml-format-style TIGHT|LOOSE
	Whether to place spaces or newlines between MXML attributes. Only applies when converting from MAML. Default
	is LOOSE

## Example

	An example MXML, written by a spider on LSD:

	<s:Application
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="onCreationComplete()"
		>

		<fx:Metadata>
			[HostComponent("spark.components.List")]
		</fx:Metadata>

		<s:states>
	        <s:State name="normal" />
	        <s:State name="disabled" />
	    </s:states>

		<s:SkinnableContainer width="100%" height="100%"


			>

	<s:Label id="label1" />

	<fx:Script>
	<![CDATA[

			import flash.events.Event;
			import mx.collections.ArrayCollection;
		
			[Bindable]
			protected var arrayCollectionToBind:ArrayCollection;

			protected function onCreationComplete():void
			{
			
			}

			protected function onChange(e:Event):void
			{
			
			}

		]]>
	</fx:Script>


				<!-- Can I have another tag sir? -->
	  			<fx:Script>
	<![CDATA[
	// fweeeeeeee
	]]>
						</fx:Script>

			<s:VGroup
				width="100%"
					height="100%">
				<s:Label id="whatAFineLabel" />
				<s:HGroup width="100%" height="50">
					<s:Label text="Fwee">
					</s:Label>
					<s:Label text="Fwei" />
					<s:Label text="Fwo"/>
					<s:Label text="Fwum"/>
				</s:HGroup>
				<mx:DataGrid id="dg" dataProvider="{arrayCollectionToBind}" width="100%" height="100%" change="onChange(event)"/>
			</s:VGroup          >

		
			<mx:DataGrid id="tunnelVision">
				<mx:columns>
					<mx:DataGridColumn id="giveMeTunnelVision">
						<mx:itemRenderer>
							<fx:Component>
								<mx:Label>
									<fx:Script>
										<![CDATA[
											override public function set data(value:Object):void
											{      
												if(value != null)
												{
													super.data = value;
												}
											}
										]]>
									</fx:Script>
								</mx:Label>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</s:SkinnableContainer>
	</s:Application>

Would convert to MAML:

	s:Application
	xmlns:fx         = http://ns.adobe.com/mxml/2009
	xmlns:mx         = library://ns.adobe.com/flex/mx
	xmlns:s          = library://ns.adobe.com/flex/spark
	creationComplete = onCreationComplete()

	  <fx:Metadata>
	      [HostComponent("spark.components.List")]
	    </fx:Metadata>

	  s:states

	    s:State
	    name = normal

	    s:State
	    name = disabled

	  s:SkinnableContainer
	  width  = 100%
	  height = 100%

	    s:Label
	    id = label1

	    <fx:Script>
	    <![CDATA[
    
	        import flash.events.Event;
	        import mx.collections.ArrayCollection;
        
	        [Bindable]
	        protected var arrayCollectionToBind:ArrayCollection;
    
	        protected function onCreationComplete():void
	        {
          
	        }
    
	        protected function onChange(e:Event):void
	        {
          
	        }
    
	      ]]>
	    </fx:Script>

	    # Can I have another tag sir? 

	    <fx:Script>
	    <![CDATA[
	    // fweeeeeeee
	    ]]>
	              </fx:Script>

	    s:VGroup
	    width  = 100%
	    height = 100%

	      s:Label
	      id = whatAFineLabel

	      s:HGroup
	      width  = 100%
	      height = 50

	        s:Label
	        text = Fwee

	        s:Label
	        text = Fwei

	        s:Label
	        text = Fwo

	        s:Label
	        text = Fwum

	        fx:String
	        id              = nodeWithValue
	        mxml_node_value = A node with a value

	        mx:DataGrid
	        id           = dg
	        dataProvider = {arrayCollectionToBind}
	        width        = 100%
	        height       = 100%
	        change       = onChange(event)

	      mx:DataGrid
	      id = tunnelVision

	        mx:columns

	          mx:DataGridColumn
	          id = giveMeTunnelVision

	            mx:itemRenderer

	              fx:Component

	                mx:Label

	                  <fx:Script>
	                                    <![CDATA[
	                                      override public function set data(value:Object):void
	                                      {      
	                                        if(value != null)
	                                        {
	                                          super.data = value;
	                                        }
	                                      }
	                                    ]]>
	                                  </fx:Script>

Which would convert back to MXML (effectively a tidy script):

	<s:Application
	   xmlns:fx="http://ns.adobe.com/mxml/2009"
	   xmlns:mx="library://ns.adobe.com/flex/mx"
	   xmlns:s="library://ns.adobe.com/flex/spark"
	   creationComplete="onCreationComplete()">
	  <fx:Metadata>
	      [HostComponent("spark.components.List")]
	  </fx:Metadata>

	  <s:states>
	    <s:State
	       name="normal" />

	    <s:State
	       name="disabled" />
	  </s:states>

	  <s:SkinnableContainer
	     width="100%"
	     height="100%">
	    <s:Label
	       id="label1" />

	    <fx:Script>
	    <![CDATA[
    
	        import flash.events.Event;
	        import mx.collections.ArrayCollection;
        
	        [Bindable]
	        protected var arrayCollectionToBind:ArrayCollection;
    
	        protected function onCreationComplete():void
	        {
          
	        }
    
	        protected function onChange(e:Event):void
	        {
          
	        }
    
	      ]]>
	    </fx:Script>

	    <!-- Can I have another tag sir?-->

	    <fx:Script>
	    <![CDATA[
	    // fweeeeeeee
	    ]]>
	    </fx:Script>

	    <s:VGroup
	       width="100%"
	       height="100%">
	      <s:Label
	         id="whatAFineLabel" />

	      <s:HGroup
	         width="100%"
	         height="50">
	        <s:Label
	           text="Fwee" />

	        <s:Label
	           text="Fwei" />

	        <s:Label
	           text="Fwo" />

	        <s:Label
	           text="Fwum" />

	        <fx:String
	            id="nodeWithValue"        >A node with a value</fx:String>

	        <mx:DataGrid
	            id="dg"
	            dataProvider="{arrayCollectionToBind}"
	            width="100%"
	            height="100%"
	            change="onChange(event)" />
	      </s:HGroup>

	      <mx:DataGrid
	          id="tunnelVision">
	        <mx:columns>
	          <mx:DataGridColumn
	              id="giveMeTunnelVision">
	            <mx:itemRenderer>
	              <fx:Component>
	                <mx:Label>
	                  <fx:Script>
	                                    <![CDATA[
	                                      override public function set data(value:Object):void
	                                      {      
	                                        if(value != null)
	                                        {
	                                          super.data = value;
	                                        }
	                                      }
	                                    ]]>
	                  </fx:Script>
	                </mx:Label>
	              </fx:Component>
	            </mx:itemRenderer>
	          </mx:DataGridColumn>
	        </mx:columns>
	      </mx:DataGrid>
	    </s:VGroup>
	  </s:SkinnableContainer>
	</s:Application>

## Known Issues

* Nodes with values (i.e. <fx:String>Foo</fx:String>) cause faulty conversions
* Tabs become spaces
* If you toss in a non-existent dinosaur, you set the MAML on fire
* Script/Metadata tags don't align well, especially if they're heavily indented

## Future Ideas

* Make tests for it
* Make more YAML-like MXML export
* Preserve comments in a pleasant format
* Formatting for ActionScript within Script tags
* Remove need for namespacing, generate a massively polluted MXML opening tag that contains all possible namespace enumerations, including any directory in the source path, and prepend these generated namespaces to the classes they would affect. This would probably not be appreciated by parallel developers.
* Something similar for all those silly improt statements

Please fork, have your way with it, and tell me how it goes!
	
## MIT License

Copyright (c) 2011 Buck DeFore

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
